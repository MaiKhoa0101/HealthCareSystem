package com.hellodoc.healthcaresystem.user.home.booking

import android.content.Context
import android.content.SharedPreferences

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.KeyboardArrowRight
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.lifecycle.viewmodel.initializer
import androidx.lifecycle.viewmodel.viewModelFactory
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.hellodoc.healthcaresystem.R
import com.hellodoc.healthcaresystem.viewmodel.UserViewModel

var doctorId: String = ""
var doctorName: String = ""
var doctorAddress: String = ""
var specialtyName: String = ""
var patientID: String = ""
var patientName: String = ""
var patientPhone: String = ""
var patientAddress: String = ""
var date: String = "" // V√≠ d·ª•: "20/04/2025"
var time: String = "" // V√≠ d·ª•: "14:30"
//var status: String = "pending" // pending/confirmed/cancelled
//var examinationMethod: String = "" // "at_clinic" ho·∫∑c "at_home"
var totalCost: String = "0"
var reason: String = "hello"
var location: String = ""

@Composable
fun AppointmentDetailScreen(context: Context, onBack: () -> Unit, navHostController: NavHostController) {
    val sharedPreferences = context.getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
    val userViewModel: UserViewModel = viewModel(factory = viewModelFactory {
        initializer { UserViewModel(sharedPreferences) }
    })

    // Bi·∫øn tr·∫°ng th√°i ki·ªÉm tra ƒë√£ load xong data ch∆∞a
    var isDataLoaded by remember { mutableStateOf(false) }

    LaunchedEffect(Unit) {
        patientName = userViewModel.getUserAttributeString("name")
        patientPhone = userViewModel.getUserAttributeString("phone")
        patientAddress = userViewModel.getUserAttributeString("address")
        patientID = userViewModel.getUserAttributeString("userId")
    }

    val savedStateHandle = navHostController.previousBackStackEntry?.savedStateHandle
    LaunchedEffect(savedStateHandle) {
        savedStateHandle?.get<String>("doctorId")?.let {
            doctorId = it
        }
        savedStateHandle?.get<String>("doctorName")?.let {
            doctorName = it
        }
        savedStateHandle?.get<String>("doctorAddress")?.let {
            doctorAddress = it
        }
        savedStateHandle?.get<String>("specialtyName")?.let {
            specialtyName = it
        }

        isDataLoaded = true
    }

    if (isDataLoaded && patientID.isNotBlank() && doctorId.isNotBlank()) {
        Column(
            modifier = Modifier
                .fillMaxSize()
        ) {
            val examinationMethod = remember { mutableStateOf("") }
            var notes by remember { mutableStateOf("") }
            TopBar(title = "Chi ti·∫øt l·ªãch h·∫πn kh√°m", onClick = { navHostController.popBackStack() })
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color(0xFFF4F5F7))
                    .padding(horizontal = 16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                item {
                    DoctorInfoSection()
                }

                item {
                    PatientInfoSection()
                }

                item {
                    VisitMethodSection(examinationMethod)
                }

                item {
                    AppointmentDateSection(navHostController)
                }

                item {
                    NoteToDoctorSection(notes, onNoteChange = { notes = it })
                }

                item {
                    FeeSummarySection()
                }

                item {
                    BookButton(navHostController, sharedPreferences, examinationMethod, notes)
                }
            }
        }
    }
}

@Composable
fun TopBar(title: String,onClick: () -> Unit) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .background(Color(0xFF00BCD4))
            .statusBarsPadding()
            .height(56.dp)
    ) {
        // N√∫t quay l·∫°i
        Icon(
            imageVector = Icons.Filled.ArrowBack,
            contentDescription = "Back Button",
            tint = Color.White,
            modifier = Modifier
                .align(Alignment.CenterStart)
                .padding(start = 16.dp)
                .clickable { onClick() }
        )

        // Ti√™u ƒë·ªÅ ·ªü gi·ªØa
        Text(
            text = title,
            color = Color.White,
            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),
            modifier = Modifier.align(Alignment.Center)
        )
    }
}



@Composable
fun DoctorInfoSection() {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 12.dp)
            .clip(RoundedCornerShape(16.dp))
            .background(Color.White)
            .padding(16.dp)
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Image(
                painter = painterResource(id = R.drawable.doctor), // thay b·∫±ng ·∫£nh th·ª±c t·∫ø
                contentDescription = "Doctor",
                modifier = Modifier
                    .size(100.dp)
                    .clip(CircleShape)
            )
            Spacer(modifier = Modifier.width(12.dp))
            Column {
                Text("B√°c sƒ©", fontWeight = FontWeight.Medium, fontSize = 18.sp)
                Spacer(modifier = Modifier.height(12.dp))
                Text(doctorName, fontWeight = FontWeight.Bold, fontSize = 18.sp)
                Spacer(modifier = Modifier.height(12.dp))
                Text(specialtyName, color = Color.Gray)

//                Spacer(modifier = Modifier.height(20.dp))
//
//                Text("0 ƒë / gi·ªù")
            }
        }
    }
}

@Composable
fun PatientInfoSection() {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 40.dp)
    ) {
        // Ph·∫ßn n·ªÅn d∆∞·ªõi: Xem chi ti·∫øt & S·ª≠a h·ªì s∆°
        Box(
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .fillMaxWidth()
                .height(100.dp)
                .clip(RoundedCornerShape(12.dp))
                .background(Color(0xFFE0E0E0))
        ) {
            Row(
                modifier = Modifier
                    .align(Alignment.BottomCenter)
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "Xem chi ti·∫øt",
                    color = Color.Black,
                    fontSize = 13.sp
                )

                TextButton(
                    onClick = { /* TODO */ },
                    contentPadding = PaddingValues(horizontal = 10.dp, vertical = 0.dp),
                    colors = ButtonDefaults.textButtonColors(
                        containerColor = Color(0xFFDCF5F9),
                        contentColor = Color.Black
                    ),
                    shape = RoundedCornerShape(6.dp),
                ) {
                    Text("S·ª≠a h·ªì s∆°", fontSize = 13.sp)
                }
            }
        }

        // Box tr·∫Øng n·∫±m ƒë√® l√™n tr√™n
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .align(Alignment.TopCenter)
                .offset(y = (-50).dp)
                .padding(vertical = 16.dp) // üëà padding cho c·∫£ shadow + n·ªôi dung
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .shadow(4.dp, RoundedCornerShape(12.dp))
                    .background(Color.White, RoundedCornerShape(12.dp))
                    .padding(16.dp)
            ) {
                Text("ƒê·∫∑t l·ªãch kh√°m n√†y cho:", fontWeight = FontWeight.Bold)
                Spacer(modifier = Modifier.height(8.dp))
                InfoRow("H·ªç v√† t√™n:", patientName)
                InfoRow("Gi·ªõi t√≠nh:", "Nam")
                InfoRow("Ng√†y sinh:", "11/12/2000")
                InfoRow("ƒêi·ªán tho·∫°i:", patientPhone)
            }
        }
    }
}

@Composable
fun VisitMethodSection(examinationMethod:  MutableState<String>) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(12.dp))
            .background(Color.White)
            .padding(16.dp)
    ) {
        Text("Ph∆∞∆°ng th·ª©c kh√°m", fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(12.dp))

        // Kh√°m t·∫°i ph√≤ng kh√°m
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(10.dp))
                .background(
                    if (examinationMethod.value == "at_clinic") Color(0xFFD2D2D2) else Color(0xFFDDFDFF)
                )
                .border(1.dp, Color.LightGray, RoundedCornerShape(10.dp))
                .clickable { examinationMethod.value = "at_clinic" }
                .padding(12.dp)
                .height(70.dp),
            verticalArrangement = Arrangement.Center
        ) {
            Text("Kh√°m t·∫°i ph√≤ng kh√°m", fontWeight = FontWeight.Bold)
            Row {
                Text(
                    "ƒê·ªãa ch·ªâ:",
                    fontSize = 13.sp
                )
                Spacer(modifier = Modifier.width(5.dp))
                Text(
                    doctorAddress,
                    fontSize = 13.sp
                )
            }
        }

        Spacer(modifier = Modifier.height(12.dp))

        // Kh√°m t·∫°i nh√†
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(10.dp))
                .background(
                    if (examinationMethod.value == "at_home") Color(0xFFD2D2D2) else Color(0xFFDDFDFF)
                )
                .border(1.dp, Color.LightGray, RoundedCornerShape(10.dp))
                .clickable { examinationMethod.value = "at_home" }
                .height(100.dp)
                .padding(horizontal = 12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Column(modifier = Modifier

                .weight(1f)) {
                Text("Kh√°m t·∫°i nh√†", fontWeight = FontWeight.Bold)
                Row {
                    Text(
                        "ƒê·ªãa ch·ªâ:",
                        fontSize = 13.sp
                    )
                    Spacer(modifier = Modifier.width(5.dp))
                    Text(
                        patientAddress,
                        fontSize = 13.sp
                    )
                }
            }
            Icon(Icons.Default.KeyboardArrowRight, contentDescription = null, tint = Color.Gray)
        }
    }
}


@Composable
fun AppointmentDateSection(navHostController : NavHostController) {
    val savedStateHandle = navHostController.currentBackStackEntry?.savedStateHandle
//    var selectedDate by remember { mutableStateOf("31/3/2025") }
//    var selectedTime by remember { mutableStateOf("20:00") }

    // C·∫≠p nh·∫≠t gi√° tr·ªã n·∫øu c√≥ trong savedStateHandle
    LaunchedEffect(savedStateHandle) {
        savedStateHandle?.get<String>("selected_date")?.let {
            date = it
        }
        savedStateHandle?.get<String>("selected_time")?.let {
            time = it
        }
    }

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(16.dp))
            .background(Color.White)
            .padding(horizontal = 16.dp, vertical = 12.dp)
    ) {
        Text(text = "Ng√†y kh√°m", fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(8.dp))

        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clip(RoundedCornerShape(12.dp))
                .background(Color(0xFFE0E0E0))
                .padding(horizontal = 12.dp, vertical = 14.dp)
                .clickable {navHostController.navigate("booking-calendar")},
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Text(time)
                Spacer(modifier = Modifier.width(16.dp))
                Text(date)
            }
            Icon(
                imageVector = Icons.Default.KeyboardArrowRight,
                contentDescription = null,
                tint = Color.Black
            )
        }
    }
}


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NoteToDoctorSection(notes: String, onNoteChange: (String) -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(16.dp))
            .background(Color.White)
            .padding(horizontal = 16.dp, vertical = 12.dp)
    ) {
        Text(text = "L·ªùi nh·∫Øn cho b√°c sƒ©:", fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = notes,
            onValueChange = { onNoteChange(it) },
            placeholder = { Text("Nh·∫≠p l·ªùi nh·∫Øn...") },
            modifier = Modifier
                .fillMaxWidth()
                .height(90.dp)
                .clip(RoundedCornerShape(12.dp))
                .background(Color(0xFFE0E0E0)),
            colors = TextFieldDefaults.outlinedTextFieldColors(
                containerColor = Color(0xFFE0E0E0),
                focusedBorderColor = Color.Transparent,
                unfocusedBorderColor = Color.Transparent
            )
        )
    }
}


@Composable
fun FeeSummarySection() {
    CardSection(title = "Chi ph√≠ kh√°m t·∫°i ph√≤ng kh√°m") {
        InfoRow("Voucher d·ªãch v·ª•", "0ƒë", Color.Red)
        InfoRow("Gi√° d·ªãch v·ª•", "0ƒë")
        InfoRow("T·∫°m t√≠nh gi√° ti·ªÅn", "0ƒë", fontWeight = FontWeight.Bold)
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun BookButton(navHostController: NavHostController, sharedPreferences: SharedPreferences, examinationMethod: MutableState<String>, notes: String) {
//    val appointmentViewModel: AppointmentViewModel = viewModel(
//        factory = viewModelFactory {
//            initializer {
//                AppointmentViewModel(sharedPreferences)
//            }
//        }
//    )

    var showDialog by remember { mutableStateOf(false) }
    var dialogMessage by remember { mutableStateOf("") }

    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            confirmButton = {
                TextButton(onClick = { showDialog = false }) {
                    Text("OK")
                }
            },
            title = { Text("Thi·∫øu th√¥ng tin") },
            text = { Text(dialogMessage) }
        )
    }



//    FeeSummarySection()

    Button(
        onClick = {
            when {
                examinationMethod.value.isBlank() -> {
                    dialogMessage = "Vui l√≤ng ch·ªçn h√¨nh th·ª©c kh√°m"
                    showDialog = true
                }
                date.isBlank() || time.isBlank() -> {
                    dialogMessage = "Vui l√≤ng ch·ªçn ng√†y gi·ªù kh√°m"
                    showDialog = true
                }
                else -> {

                    navHostController.currentBackStackEntry?.savedStateHandle?.apply {
                        set("examinationMethod", examinationMethod.value)
                        set("notes", notes)
                    }
                    navHostController.navigate("booking-confirm")
                }
            }
        },
        modifier = Modifier
            .fillMaxWidth()
            .height(50.dp),
        shape = RoundedCornerShape(12.dp),
        colors = ButtonDefaults.buttonColors(
            containerColor = Color(0xFF00C5CB), // M√†u n·ªÅn
            contentColor = Color.White          // M√†u ch·ªØ
        )
    ) {
        Text("ƒê·∫∑t d·ªãch v·ª•")
    }
    Spacer(modifier = Modifier.height(60.dp))
}

@Composable
fun CardSection(title: String, content: @Composable ColumnScope.() -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .clip(RoundedCornerShape(16.dp))
            .background(Color.White)
            .padding(16.dp)
    ) {
        Text(title, fontWeight = FontWeight.Bold)
        Spacer(modifier = Modifier.height(8.dp))
        content()
    }
}

@Composable
fun InfoRow(
    label: String,
    value: String,
    valueColor: Color = Color.Black,
    fontWeight: FontWeight = FontWeight.Normal
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        verticalAlignment = Alignment.Top,
    ) {
        Text(
            text = label,
            maxLines = 1,
            overflow = TextOverflow.Ellipsis,
            modifier = Modifier
                .weight(1f)
                .padding(end = 8.dp)
        )
        Text(
            text = value,
            color = valueColor,
            fontWeight = fontWeight,
            modifier = Modifier
                .weight(1f)
                .padding(start = 8.dp),
            softWrap = true
        )
    }
}

@Preview(name = "Light Mode")
@Composable
fun PreviewAppointmentDetailScreen() {
    val context = LocalContext.current
    val fakeNavController = rememberNavController()
    AppointmentDetailScreen(
        context = context,
        onBack = {},
        navHostController = fakeNavController,
    )
}
