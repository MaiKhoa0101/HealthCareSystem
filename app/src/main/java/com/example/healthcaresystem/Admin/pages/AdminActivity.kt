package com.example.healthcaresystem.Admin.pages

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import com.example.healthcaresystem.ui.theme.HealthCareSystemTheme

// D·ªØ li·ªáu gi·∫£ l·∫≠p
data class Appointment(
    val id: String,
    val patientName: String,
    val patientDob: String, // Ng√†y sinh b·ªánh nh√¢n
    val diagnosis: String, // Chu·∫©n ƒëo√°n b·ªánh
    val doctorName: String,
    val doctorSpecialty: String, // Chuy√™n khoa b√°c sƒ©
    val date: String,
    val time: String,
    val type: String // Th√™m ki·ªÉu kh√°m (Tr·ª±c tuy·∫øn ho·∫∑c T·∫°i ph√≤ng kh√°m)
)

class AdminActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MaterialTheme {
                LichKhamScreen()
            }
        }
    }
}

@Composable
fun LichKhamScreen() {
    val appointments = remember {
        mutableStateListOf(
            Appointment("1", "Nguy·ªÖn VƒÉn Tb√†nh", "12/03/1985", "C·∫£m c√∫m", "B√°c sƒ© B", "N·ªôi t·ªïng qu√°t", "25/03/2025", "08:30", "T·∫°i ph√≤ng kh√°m"),
            Appointment("2", "Tr·∫ßn Th·ªã L∆∞·ª°ng", "22/06/1990", "ƒêau ƒë·∫ßu", "B√°c sƒ© C", "Th·∫ßn kinh", "26/03/2025", "10:00", "Kh√°m tr·ª±c tuy·∫øn"),
            Appointment("3", "L√™ VƒÉn Cu·ªëng", "15/09/1978", "Vi√™m h·ªçng", "B√°c sƒ© D", "Tai m≈©i h·ªçng", "27/03/2025", "14:15", "T·∫°i ph√≤ng kh√°m")
        )
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF00BCD4)) // M√†u n·ªÅn xanh gi·ªëng trang ch·ªß
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "L·ªãch H·∫πn Kh√°m",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            color = Color.White
        )

        Spacer(modifier = Modifier.height(10.dp))

        if (appointments.isEmpty()) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Text(text = "Kh√¥ng c√≥ l·ªãch h·∫πn", color = Color.White)
            }
        } else {
            LazyColumn(
                modifier = Modifier.fillMaxSize(),
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(appointments) { appointment ->
                    AppointmentCard(appointment, onDelete = {
                        appointments.remove(appointment)})
                }
            }
        }
    }
}

@Composable
fun AppointmentCard(appointment: Appointment, onDelete: () -> Unit) {
    var showDialog by remember { mutableStateOf(false) }

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(8.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Column {
                    Text("üßë B·ªánh nh√¢n: ${appointment.patientName}", fontWeight = FontWeight.Bold, maxLines = 2)
                    Text("üìÖ Ng√†y sinh: ${appointment.patientDob}")
                    Text("‚öïÔ∏è Chu·∫©n ƒëo√°n: ${appointment.diagnosis}")
                    Text("üë®‚Äç‚öïÔ∏è B√°c sƒ©: ${appointment.doctorName}")
                    Text("üè• Chuy√™n khoa: ${appointment.doctorSpecialty}")
                    Text("üìÖ Ng√†y: ${appointment.date}")
                    Text("‚è∞ Gi·ªù: ${appointment.time}")
                    Text("üè• Lo·∫°i kh√°m: ${appointment.type}", fontWeight = FontWeight.Bold, color = Color.Blue)
                }
                Button(
                    onClick = { showDialog = true },
                    contentPadding = PaddingValues(0.dp),
                    colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.error)
                ) {
                    Text("X√≥a", maxLines = 1)
                }
            }
        }
    }

    if (showDialog) {
        AlertDialog(
            onDismissRequest = { showDialog = false },
            confirmButton = {
                Button(
                    onClick = {
                        onDelete()
                        showDialog = false
                    }
                ) {
                    Text("X√°c nh·∫≠n x√≥a")
                }
            },
            dismissButton = {
                Button(
                    onClick = { showDialog = false }
                ) {
                    Text("H·ªßy")
                }
            },
            title = { Text("X√°c nh·∫≠n") },
            text = { Text("·∫§n n√∫t x√≥a ƒë·ªÉ x√≥a l·ªãch h·∫πn.") }
        )
    }
}
@Preview(showBackground = true, showSystemUi = true)
@Composable
fun GreetingPreview() {
    HealthCareSystemTheme {
        LichKhamScreen()
    }
}